# Minimal working program
define STOP = 0x6002;
void reset()
{
    *STOP = 0;
}

# Output
#out 1 2 3
define OUT = 0x6000;
define STOP = 0x6002;
void reset()
{
    *OUT = 1;
    *OUT = 2;
    *OUT = 3;
    *STOP = 0;
}

# Input
#in 4 5 6
#out 4 5 6
define OUT = 0x6000;
define STOP = 0x6002;
void reset()
{
    *OUT = *OUT;
    *OUT = *OUT;
    *OUT = *OUT;
    *STOP = 0;
}

# Binary operators
#out 0x5100 0x1125
define OUT = 0x6000;
define STOP = 0x6002;
void reset()
{
    *OUT = 0x20FF + 0x3001;
    *OUT = 0x1234 - 0x010F;
    *STOP = 0;
}

# Parentheses
#out 1 9
define OUT = 0x6000;
define STOP = 0x6002;
void reset()
{
    *OUT = 10 - 5 - 4;
    *OUT = 10 - (5 - 4);
    *STOP = 0;
}

# Nested assignment
#in 0x1234
#out 0x1234 0x1234 0x1234
define OUT = 0x6000;
define STOP = 0x6002;
void reset()
{
    *OUT = (*OUT = (*OUT = *OUT));
    *STOP = 0;
}

# Locals
#in 0x1122
#out 0x1122
define OUT = 0x6000;
define STOP = 0x6002;
void reset()
{
    uint16_t a = *OUT;
    *OUT = a;
    *STOP = 0;
}

# Locals
#in 0x1122 0x3344
#out 0x3344 0x1122 0x3344
define OUT = 0x6000;
define STOP = 0x6002;
void reset()
{
    uint16_t b;
    uint16_t a = *OUT;
    b = *OUT;
    *OUT = b;
    *OUT = a;
    *OUT = b;
    *STOP = 0;
}

# If statement
#in 4 0x1200 0 6
#out 1 2 4
define OUT = 0x6000;
define STOP = 0x6002;
void reset()
{
    if (*OUT) *OUT = 1;
    if (*OUT) *OUT = 2;
    if (*OUT) *OUT = 3;
    if (*OUT) *OUT = 4;
    *STOP = 0;
}

# If statement
#in 1 0 1
#out 1 1 9 2
define OUT = 0x6000;
define STOP = 0x6002;
void reset()
{
    uint16_t x = 0;
    if (*OUT) x = x + 1;
    *OUT = x;
    if (*OUT) { x = x + 1; }
    *OUT = x;
    if (*OUT)
    {
        *OUT = 9;
        x = x + 1;
    }
    *OUT = x;
    *STOP = 0;
}

# Single line comments
#in
#out 1 4 5
define OUT = 0x6000;
define STOP = 0x6002;
void reset()
{
    *OUT = 1;
    //*OUT = 2;
//    *OUT = 3;
    *OUT = 4;
    //
    *OUT = 5;
    *STOP = 0;
}

# Functions
#in 2 3 4
#out 1 2 1 3 1 4
define OUT = 0x6000;
define STOP = 0x6002;
void reset()
{
    f();
    f();
    f();
    *STOP = 0;
}

void f() { *OUT = 1; *OUT = *OUT; }

# Function arguments
#in
#out 1 7 2 8 3 9
define OUT = 0x6000;
define STOP = 0x6002;
void reset()
{
    f(7, 1);
    f(8, 2);
    f(9, 3);
    *STOP = 0;
}

void f(uint16_t red, uint16_t blue)
{
    *OUT = blue;
    *OUT = red;
}

# Function return values
#in
#out 3 5 7
define OUT = 0x6000;
define STOP = 0x6002;
void reset()
{
    *OUT = f(1);
    *OUT = f(2);
    *OUT = f(3);
    *STOP = 0;
}

void f(uint16_t arg)
{
    arg = arg + arg;
    return arg + 1;
}

# Multiple functions
#in
#out 3 4 7
define OUT = 0x6000;
define STOP = 0x6002;
void reset()
{
    *OUT = f(1);
    *OUT = g(2);
    *OUT = f(3);
    *STOP = 0;
}

void f(uint16_t arg)
{
    return arg + arg + 1;
}

void g(uint16_t arg)
{
    return arg + arg;
}

# Entry points
#in
#out 0x9988
define OUT = 0x6000;
define STOP = 0x6002;

void nmi()
{
    *OUT = 0x7766;
    *STOP = 0;
}

void reset()
{
    *OUT = 0x9988;
    *STOP = 0;
}

void brk()
{
    *OUT = 0x2211;
    *STOP = 0;
}
